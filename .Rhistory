aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 669*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.125, b*1.125*1.1, b*1.125*1.1*1.35)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.125, b*1.125*1.1, b*1.125*1.1*1.35)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.26)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.265)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.268)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.266)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.267)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.2675)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.2672)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.2671)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.26705)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.26707)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.267065)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.267068)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
a <- 671*(.9)^(1:32)
b <- c(6800)
for(i in 2:32){
b[i] <- b[(i-1)]-a[(i-1)]
}
b
b <- ifelse(b>1000, b, 1000)
aa <- data.frame(b, b*1.05, b*1.05*1.05, b*1.125*1.05*1.267069)
aa <- aa*1000
aa <- round(aa)
for(i in 1:4){
aa[,i] <- paste0("$", formatC(as.numeric(aa[,i]), format="f", digits=0, big.mark=","))
}
rownames(aa) <- paste("Pick", 1:32)
colnames(aa) <- paste("Year", 1:4)
knitr::kable(aa)
(1/2)/sqrt(5/6)
(1/2)/(1/6)
antes <- c(68,94,85,103,56,70,57,83,59,102,64,75,88,107,67,83,97,94,81,86,91,75,68,64,83,73,75,77,86,97)
depois <- c(67,81,80,97,53,67,54,73,55,88,63,68,79,100,73,83,79,65,77,83,77,68,70,61,64,70,63,75,70,71)
t.test(antes,depois,paired = T,alternative = "less")
t.test(antes,depois,paired = T,alternative = "greater")
var(antes)
var(depois)
var.test(antes,depois)
t.test(antes,depois,paired = T,alternative = "greater",var.equal = T)
t.test(antes,depois,paired = T,alternative = "greater",var.equal = F)
T
t.test(antes,depois,paired = T,alternative = "greater",var.equal = T)
t.test(antes-depois)
t.test(antes-depois, alternative = "greater")
mean(antes-depois)
D <- antes-depois
D-mean(D)
(D-mean(D))^2
sum((D-mean(D))^2)
sum((D-mean(D))^2)/29
sd <- sum((D-mean(D))^2)/29
sqrt(sd/30)
deno <- sqrt(sd/30)
7.8/deno
estteste <- 7.8/deno
qt(estteste, 29)
pt(estteste, 29)
1-pt(estteste, 29)
qt(estteste, 29)
qt(.95, 29)
x <- -100:100
y <- -100:100
3*x^2 - 4*x*y + 6
plot(3*x^2 - 4*x*y + 6)
func <- function(par){
x <- par[1]
y <- par[2]
if(x^2+y^2 == 1){
3*x^2 - 4*x*y + 6
}else{
-Inf
}
}
optim(func, c(0,0))
optim(func, c(0,0), control=list(fnscale=-1))
optim(c(0,0), func, control=list(fnscale=-1))
optim(c(1,1), func, control=list(fnscale=-1))
optim(c(sqrt(0.5),sqrt(0.5)), func, control=list(fnscale=-1))
sqrt(0.5)
sqrt(0.5)^2
func <- function(par){
x <- par[1]
y <- par[2]
if(x^2 + y^2 == 1){
3*x^2 - 4*x*y + 6
}else{
-Inf
}
}
optim(c(sqrt(0.5),sqrt(0.5)), func, control=list(fnscale=-1))
optim(c(sqrt(0.75),sqrt(0.25)), func, control=list(fnscale=-1))
optim(c(1,0), func, control=list(fnscale=-1))
optim(c(0,1), func, control=list(fnscale=-1))
func <- function(par){
x <- par[1]
y <- par[2]
if(x^2 + y^2 == 1){
9*x^2 - 4*x*y + 6*y^2
}else{
-Inf
}
}
optim(c(0,1), func, control=list(fnscale=-1))
optim(c(1,0), func, control=list(fnscale=-1))
x <- sqrt(0.5)
y <- sqrt(0.5)
9*x^2 - 4*x*y + 6*y^2
x <- seq(0,1,by=.0001)
y <- seq(0,1,by=.0001)
plot(9*x^2 - 4*x*y + 6*y^2)
x <- seq(0,2,by=.0001)
y <- seq(0,2,by=.0001)
plot(9*x^2 - 4*x*y + 6*y^2)
9*x^2 - 4*x*y + 6*y^2
x <- seq(0,2,by=.001)
y <- seq(0,2,by=.001)
plot(9*x^2 - 4*x*y + 6*y^2)
x <- seq(0,3,by=.001)
y <- seq(0,3,by=.001)
plot(9*x^2 - 4*x*y + 6*y^2)
func <- function(par){
x <- par[1]
y <- par[2]
if(x^2 + y^2 <= 1){
9*x^2 - 4*x*y + 6*y^2
}else{
-Inf
}
}
optim(c(1,0), func, control=list(fnscale=-1))
optim(c(0,1), func, control=list(fnscale=-1))
optim(c(1,0), func, control=list(fnscale=-1))
optim(c(0,0), func, control=list(fnscale=-1))
f <- 9*x^2 - 4*x*y + 6*y^2
which(x^2+y^2 > 0.99 & x^2+y^2 < 1.01)
plot(f[705:711])
x <- seq(-1,1,by=.001)
y <- seq(-1,1,by=.001)
f <- 9*x^2 - 4*x*y + 6*y^2
which(x^2+y^2 > 0.99 & x^2+y^2 < 1.01)
plot(f)
x <- seq(-1,1,by=.001)
y <- seq(-1,1,by=.001)
f <- 9*x^2 - 4*x*y + 6*y^2
which(x^2+y^2 > 0.99 & x^2+y^2 < 1.01)
plot(f)
points(f[which(x^2+y^2 > 0.99 & x^2+y^2 < 1.01)], col=2)
points(which(x^2+y^2 > 0.99 & x^2+y^2 < 1.01),f[which(x^2+y^2 > 0.99 & x^2+y^2 < 1.01)], col=2)
x[which(x^2+y^2 > 0.99 & x^2+y^2 < 1.01)]
y[which(x^2+y^2 > 0.99 & x^2+y^2 < 1.01)]
install.packages("plotrix")
library(plotrix)
draw.circle(0,0,1)
draw.circle(0,0,1)
plot()
x <- seq(-1,1,by=.001)
y <- seq(-1,1,by=.001)
f <- 9*x^2 - 4*x*y + 6*y^2
which(x^2+y^2 > 0.99 & x^2+y^2 < 1.01)
plot(f)
draw.circle(0,0,1)
nomes <- c("Fonte de Variação", "Graus de Liberdade")
fv <- c("Tratamento", "Bloco", "Resíduo", "Total")
gl <- c(3,5,15,23)
tab <- data.frame(fv,gl)
colnames(tab) <- nomes
tab
rm(list=ls()) # limpar os objetos
require(agricolae) # carregar pacote agricolae
install.packages("agricolae")
require(agricolae) # carregar pacote agricolae
trat <- c("S","M","A","B");trat # tratamentos
r=c(6,6,6,6);r # numero repetições
sort <- design.crd(trat,r,seed=10,serie=0); sort # sorteio para um DIC
matrix(sort$book$trat,6,byrow=T) # croqui
rm(list=ls()) # limpar os objetos
require(agricolae) # carregar pacote agricolae
trat <- LETTERS[1:4];trat # tratamentos
blocos=c(5,5,5,5);blocos # numero de blocos
sort <- design.rcbd(trat,blocos); sort # sorteio para um DBC
(croqui_DBC <- sort$sketch) # croqui
x <- 0
(1/log(x))^(1+x)
x <- 10
(1/log(x))^(1+x)
x <- 10000
(1/log(x))^(1+x)
mu <- c(67,65,64,63)
sigma <- c(14,13,11,10)
1/(1-exp(-exp(-(100-mu)/sigma)))
mu-sigma*log(-log(0.5))
(1-exp(-exp(-(100-mu)/sigma)))
(1-exp(-exp(-(60-mu)/sigma)))
dados <- c(63,61,58,64,65,80,49,68,58,59,68,88,79,72,54,90,76,73,70,81,
50,72,58,60,86,92,61,66,72,94,69,68,57,62,79,46,54,66,68,101,
64,69,65,68,55,47,47,51,66,92)
boxplot(dados)
a <- boxplot(dados)
a$stats
summary(dados)
a$n
a$conf
a$out
a$group
a$names
abline(h=62.64831)
abline(h=629.35169)
abline(h=69.35169)
sort(dados)
sort(dados)[25:26]
.25*50
sort(dados)[12:13]
quantile(dados)
summary(dados)
quantile(dados)
.25*50
quantile(dados, type=1)
quantile(dados, type=1:9)
quantile(dados, type=1)
quantile(dados, type=2)
quantile(dados, type=3)
quantile(dados, type=4)
.75*50
sort(dados)[37:38]
quantile(dados, type=5)
quantile(dados, type=6)
quantile(dados, type=7)
quantile(dados, type=8)
quantile(dados, type=9)
.5*50
.25*50
53/4
sort(dados)[13:!4]
sort(dados)[13:14]
58*.25+59*.75
quantile(dados)
58*.75+59*.25
151/4
sort(dados)[37:38]
72*.25+73*.75
a
boxplot(dados)
locator()
summary(dados)
72.75-58.25
1.5*14.5
58.25-21.75
sort(dados)
72.75+21.75
locator()
abline(h=94)
abline(h=94.5)
boxplot(dados)
abline(h=94.5)
quantile(dados, type=1)
73+1.5*15
quantile(dados, type=3)
quantile(dados, type=4)
72.5-58
14.5*1.5
72.5+21.75
abline(h=94.25)
quantile(dados, type=5)
quantile(dados, type=6)
14.75*1.5
quantile(dados, type=8)
14.25*1.5
quantile(dados, type=9)
dados <- c(63,61,58,64,65,80,49,68,58,59,68,88,79,72,54,90,76,73,70,81,
50,72,58,60,86,92,61,66,72,93,69,68,57,62,79,46,54,66,68,101,
64,69,65,68,55,47,47,51,66,92)
boxplot(dados)
abline(h=93)
summary(dados)
72.75-58.25
14.5*1.5
72.75+21.75
setwd("D:/Gu/ENAP/Dados/Regressao")
aa <- read.csv2("Abertura_CO.csv")
aa <- read.csv("Abertura_CO.csv")
View(aa)
summary(aa)
setwd("D:/Gu/ENAP/Dados")
aa <- read.csv("2007.csv")
aa <- read.csv2("2007.csv")
View(aa)
summary(aa)
aa <- read.csv2("2007.csv", encoding = "UTF-8")
summary(aa)
aa <- read.csv2("Agua_Esgoto.csv", encoding = "UTF-8")
aa <- read.csv("Agua_Esgoto.csv", encoding = "UTF-8")
summary(aa)
aa <- read.csv("dados.csv", encoding = "UTF-8")
summary(aa)
